def insert(self, i, val):
        if i >= self.size + 1:
            return -1
        cnt = 0
        node = AVLNode(val)
        if i == self.size and not (self.empty()):
            temp1 = self.root.Max()
            temp1.setRight(node)
            node.setParent(temp1)
            self.firstItem = node
            par = temp1

        elif self.empty() and i == self.size:
            self.root = node
            self.firstItem = node
            self.lastItem = node
            par = AVLNode.virtual_node

        else:
            index_node = self.root.get_node_index(i + 1)
            if not (index_node.getLeft().isRealNode()):
                index_node.setLeft(node)
                node.setParent(index_node)
                par = index_node
                if i == 0:
                    self.lastItem = node
            else:
                pred = index_node.predecessor()
                pred.setRight(node)
                node.setParent(pred)
                par = pred
        if not (node.getParent().isRealNode()):
            self.root = node
        temp = node
        self.size += 1
        while par.isRealNode():
            par.recalculate_node_attributes()
            grand = par.getParent()
            if grand.get_BF() >= 2 or grand.get_BF() <= -2:
                if par == grand.getLeft():
                    if temp == grand.getLeft().getLeft():
                        self.right_rotate(grand)
                        cnt += 1

                    elif temp == grand.getLeft().getRight():
                        self.left_rotate(par)
                        self.right_rotate(grand)
                        cnt += 2

                elif par == grand.getRight():
                    if temp == grand.getRight().getRight():
                        self.left_rotate(grand)
                        cnt += 1

                    elif temp == grand.getRight().getLeft():
                        self.right_rotate(par)
                        self.left_rotate(grand)
                        cnt += 2
            par = par.getParent()
            temp = temp.getParent()
        return cnt
